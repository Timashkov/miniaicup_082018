group 'aicup'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'kotlin'
apply plugin: 'cpp'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile 'org.json:json:20180130'
    testCompile "junit:junit:4.12"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

shadowJar() {
    archiveName = 'kotlinStrategy.jar'
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'MainKt'
    }
}

build.dependsOn shadowJar

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

model {
//    repositories {
//        libs(PrebuiltLibraries) {
//            googleTest {
//                headers.srcDir new File(projectDir, "3rdparty/googletest-master/googletest/include")
//                binaries.withType(StaticLibraryBinary) {
//                    staticLibraryFile = file(projectDir.getPath() + "/3rdparty/googletest-master/googletest/build/" + findGoogleTestStaticLib(targetPlatform))
//                }
//            }
//        }
//    }
    components {
        chipmunk(NativeLibrarySpec) { }
        // Let's try using the library
        main(NativeExecutableSpec) {
            sources {
                cpp.lib library: "chipmunk"
            }
        }
    }


//    binaries {
//        withType(SharedLibraryBinarySpec) {
//            if (toolChain in VisualCpp) {
//                cppCompiler.define "DLL_EXPORT"
//            }
//        }
//        withType(GoogleTestTestSuiteBinarySpec) {
//            lib library: "googleTest", linkage: "static"
//
//            if (targetPlatform.operatingSystem.linux) {
//                cppCompiler.args '-pthread'
//                linker.args '-pthread'
//            }
//        }
//    }
}

def findGoogleTestStaticLib(Platform p) {
    if (p.operatingSystem.windows) {
        return "Release/gtest.lib"
    } else {
        return "libgtest.a"
    }
}
